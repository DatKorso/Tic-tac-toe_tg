"""Game handlers for the bot"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.game.logic import TicTacToeGame, GameState, Player, GameMode
from app.keyboards.game_keyboards import (
    get_game_keyboard,
    get_start_keyboard,
    get_mode_selection_keyboard,
)


router = Router()

# Store active games per user
games: dict[int, TicTacToeGame] = {}


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """Handle /start command"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏!\n\n"
        "–Ø ‚Äî –Ω–µ–ø–æ–±–µ–¥–∏–º—ã–π –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º minimax. "
        "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–∏–≥—Ä–∞—Ç—å! üòé\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard(),
    )


@router.message(Command("newgame"))
async def cmd_new_game(message: Message) -> None:
    """Handle /newgame command"""
    user_id = message.from_user.id
    game = TicTacToeGame()
    games[user_id] = game

    await message.answer(
        "üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!\n\n"
        f"–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ {Player.X.value}\n"
        f"–ë–æ—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {Player.O.value}\n\n"
        "–¢–≤–æ–π —Ö–æ–¥:",
        reply_markup=get_game_keyboard(game),
    )


@router.callback_query(F.data == "select_mode")
async def callback_select_mode(callback: CallbackQuery) -> None:
    """Handle mode selection button"""
    await callback.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:\n\n"
        "üéØ *–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º*\n"
        "–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ ‚ùå, –±–æ—Ç –∑–∞ ‚≠ï\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø–æ–±–µ–¥–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º minimax\n\n"
        "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º*\n"
        "–ö–∞–∂–¥—ã–π —Ö–æ–¥ —Å—Ç–∞–≤–∏—Ç –°–õ–£–ß–ê–ô–ù–´–ô —Å–∏–º–≤–æ–ª (‚ùå –∏–ª–∏ ‚≠ï)!\n"
        "–¢—ã —É–∑–Ω–∞–µ—à—å —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É (X –∏–ª–∏ O) –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.\n"
        "–ï—Å–ª–∏ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ–±–µ—Ä—É—Ç—Å—è –≤ —Ä—è–¥ - –ø–æ–±–µ–¥–∞!\n"
        "–ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–æ–¥—ã. –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞—á–∏! üçÄ",
        parse_mode="Markdown",
        reply_markup=get_mode_selection_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_start")
async def callback_back_to_start(callback: CallbackQuery) -> None:
    """Handle back to start button"""
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("mode_"))
async def callback_start_game_with_mode(callback: CallbackQuery) -> None:
    """Handle game start with selected mode"""
    user_id = callback.from_user.id

    # Parse mode from callback data
    mode = callback.data.split("_")[1]  # "classic" or "random"

    # Create game with selected mode
    game = TicTacToeGame(game_mode=mode)

    if mode == GameMode.RANDOM.value:
        # Randomize sides for player
        game.randomize_sides()
        games[user_id] = game

        await callback.message.edit_text(
            "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º!\n\n"
            f"üéØ –¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É: {game.player_side}\n"
            f"ü§ñ –ë–æ—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É: {game.ai_side}\n\n"
            "‚ö†Ô∏è –ö–∞–∂–¥—ã–π —Ö–æ–¥ —Å—Ç–∞–≤–∏—Ç –°–õ–£–ß–ê–ô–ù–´–ô —Å–∏–º–≤–æ–ª (‚ùå –∏–ª–∏ ‚≠ï)!\n"
            "–ï—Å–ª–∏ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ–±–µ—Ä—É—Ç—Å—è –≤ —Ä—è–¥ - —Ç—ã –ø–æ–±–µ–¥–∏—à—å!\n"
            "–£–¥–∞—á–∞ —Ä–µ—à–∞–µ—Ç –≤—Å—ë! üçÄ\n\n"
            "–¢–≤–æ–π —Ö–æ–¥:",
            reply_markup=get_game_keyboard(game),
        )
    else:
        games[user_id] = game

        await callback.message.edit_text(
            "üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º!\n\n"
            f"–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ {Player.X.value}\n"
            f"–ë–æ—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {Player.O.value}\n\n"
            "–¢–≤–æ–π —Ö–æ–¥:",
            reply_markup=get_game_keyboard(game),
        )

    await callback.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")


@router.callback_query(F.data == "play_vs_bot")
async def callback_play_vs_bot(callback: CallbackQuery) -> None:
    """Handle play vs bot button (redirect to mode selection)"""
    await callback_select_mode(callback)


@router.callback_query(F.data == "how_to_play")
async def callback_how_to_play(callback: CallbackQuery) -> None:
    """Handle how to play button"""
    await callback.message.edit_text(
        "üìñ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n\n"
        "1Ô∏è‚É£ –¢—ã —Ö–æ–¥–∏—à—å –ø–µ—Ä–≤—ã–º (–∫—Ä–µ—Å—Ç–∏–∫–∏ ‚ùå)\n"
        "2Ô∏è‚É£ –ë–æ—Ç —Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä—ã–º (–Ω–æ–ª–∏–∫–∏ ‚≠ï)\n"
        "3Ô∏è‚É£ –¶–µ–ª—å ‚Äî —Å–æ–±—Ä–∞—Ç—å 3 —Å–≤–æ–∏—Ö —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥\n"
        "   (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º minimax\n"
        "–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–ø–æ–±–µ–¥–∏–º!\n\n"
        "–£–¥–∞—á–∏! üçÄ",
        reply_markup=get_start_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "new_game")
async def callback_new_game(callback: CallbackQuery) -> None:
    """Handle new game button"""
    user_id = callback.from_user.id

    # Get previous game mode or default to classic
    old_game = games.get(user_id)
    game_mode = old_game.game_mode if old_game else GameMode.CLASSIC.value

    # Create new game with same mode
    game = TicTacToeGame(game_mode=game_mode)

    if game_mode == GameMode.RANDOM.value:
        game.randomize_sides()
        games[user_id] = game

        await callback.message.edit_text(
            "üé≤ –ù–æ–≤–∞—è –∏–≥—Ä–∞ (–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º)!\n\n"
            f"üéØ –¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É: {game.player_side}\n"
            f"ü§ñ –ë–æ—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É: {game.ai_side}\n\n"
            "‚ö†Ô∏è –°—Ç–æ—Ä–æ–Ω—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!\n"
            "–ö–∞–∂–¥—ã–π —Ö–æ–¥ —Å—Ç–∞–≤–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª.\n\n"
            "–¢–≤–æ–π —Ö–æ–¥:",
            reply_markup=get_game_keyboard(game),
        )
    else:
        games[user_id] = game

        await callback.message.edit_text(
            "ÔøΩ –ù–æ–≤–∞—è –∏–≥—Ä–∞ (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)!\n\n"
            f"–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ {Player.X.value}\n"
            f"–ë–æ—Ç –∏–≥—Ä–∞–µ—Ç –∑–∞ {Player.O.value}\n\n"
            "–¢–≤–æ–π —Ö–æ–¥:",
            reply_markup=get_game_keyboard(game),
        )

    await callback.answer("–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!")


@router.callback_query(F.data.startswith("move_"))
async def callback_make_move(callback: CallbackQuery) -> None:
    """Handle player move"""
    user_id = callback.from_user.id

    # Get or create game
    if user_id not in games:
        games[user_id] = TicTacToeGame()

    game = games[user_id]

    # Parse move coordinates
    _, row_str, col_str = callback.data.split("_")
    row, col = int(row_str), int(col_str)

    # Check if game is over
    if game.game_state != GameState.IN_PROGRESS.value:
        await callback.answer("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É.", show_alert=True)
        return

    # Make player move
    if not game.make_move(row, col):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥! –í—ã–±–µ—Ä–∏ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É.", show_alert=True)
        return

    # Check if game ended after player move
    message_text = _get_game_status_message(game)

    if game.game_state == GameState.IN_PROGRESS.value:
        # Make AI move
        ai_move = game.make_ai_move()
        if ai_move:
            message_text = _get_game_status_message(game)

    # Update board
    await callback.message.edit_text(message_text, reply_markup=get_game_keyboard(game))
    await callback.answer()


def _get_game_status_message(game: TicTacToeGame) -> str:
    """Get game status message based on game state"""
    winner = game.get_actual_winner()

    if game.game_mode == GameMode.RANDOM.value:
        # In RANDOM mode, use get_actual_winner() to determine who won
        if winner == "player":
            winning_side = game.player_side
            return f"üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!\n\n–¢–≤–æ—è —Å—Ç–æ—Ä–æ–Ω–∞ –±—ã–ª–∞ {winning_side}!\n–°–ª—É—á–∞–π–Ω—ã–µ —Ö–æ–¥—ã —Å–æ–±—Ä–∞–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥! üçÄ"
        elif winner == "ai":
            losing_side = game.player_side
            winning_side = game.ai_side
            return f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!\n\n–¢–≤–æ—è —Å—Ç–æ—Ä–æ–Ω–∞ –±—ã–ª–∞ {losing_side}!\n–ë–æ—Ç –∏–≥—Ä–∞–ª –∑–∞ {winning_side}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí™"
        elif winner == "draw":
            return f"ü§ù –ù–∏—á—å—è!\n\n–¢–≤–æ—è —Å—Ç–æ—Ä–æ–Ω–∞ –±—ã–ª–∞ {game.player_side}.\n–•–æ—Ä–æ—à–∞ –∏–≥—Ä–∞!"
        else:
            return "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º\n\n–ö–∞–∂–¥—ã–π —Ö–æ–¥ —Å—Ç–∞–≤–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª!\n–¢—ã –Ω–µ –∑–Ω–∞–µ—à—å —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É.\n–¢–≤–æ–π —Ö–æ–¥:"
    else:
        # Classic mode messages
        if winner == "player":
            return f"üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª! {Player.X.value} –≤—ã–∏–≥—Ä–∞–ª!\n\n–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üèÜ"
        elif winner == "ai":
            return f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! {Player.O.value} –≤—ã–∏–≥—Ä–∞–ª!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí™"
        elif winner == "draw":
            return "ü§ù –ù–∏—á—å—è!\n\n–•–æ—Ä–æ—à–∞ –∏–≥—Ä–∞!"
        else:
            return f"üéÆ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\n\n–¢–≤–æ–π —Ö–æ–¥ ({Player.X.value}):"
